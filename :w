use belly::prelude::*;
use bevy::prelude::*;

pub struct UiPlugin;

impl Plugin for UiPlugin {
    pub fn build(&self, app: &mut App) {
        app.add_plugin(BellyPlugin).add_startup_system(create_ui);
    }
}

#[derive(Component)]
pub struct TutorialText {}

pub fn create_ui(mut commands: Commands, asset_server: Res<AssetServer>) {
    commands.spawn(Camera2dBundle {
        camera: Camera {
            order: -1,
            ..default()
        },
        ..default()
    });

    // commands.spawn(eml! {
    //     <body>
    //        "Test"
    //     </body>
    // });
    commands
        .spawn(NodeBundle {
            style: Style {
                size: Size::width(Val::Percent(100.0)),
                justify_content: JustifyContent::SpaceBetween,
                ..default()
            },
            ..default()
        })
        .with_children(|parent| {
            parent.spawn((
                TextBundle::from_section(
                    "Press P to toggle visibility\nPress <ESC> to exit",
                    TextStyle {
                        font: asset_server.load("fonts/FiraSans-Bold.ttf"),
                        font_size: 25.0,
                        color: Color::rgba(1.0, 1.0, 1.0, 1.0),
                        ..default()
                    },
                )
                .with_style(Style {
                    margin: UiRect::all(Val::Px(5.0)),
                    position: UiRect::all(Val::Px(0.0)),
                    border: UiRect::all(Val::Px(5.0)),
                    ..default()
                }),
                Label,
            ));
        })
        .insert(TutorialText {});
}

pub fn toggle_visibility(
    keyboard: Res<Input<KeyCode>>,
    text_query: Query<Entity, With<TutorialText>>,
    mut commands: Commands,
) {
    if keyboard.just_pressed(KeyCode::P) || keyboard.just_pressed(KeyCode::O) {
        for text in text_query.iter() {
            commands.entity(text).despawn_recursive();
        }
    }
}
